/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.team6.client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.UnknownHostException;

import edu.duke.ece651.team6.shared.GameBasicSetting;

public class App {
  Client client;

  TextPlayer player;

  /**
   * Construct an app with 2 params
   * 
   * @param client for handling interactions (e.g. connection and communication)
   *               with server
   * @param player for handling interaction (e.g. user input for commands,
   *               initializations, play turns) with players
   */
  public App(Client client, TextPlayer player) {
    this.client = client;
    this.player = player;
  }

  public static void main(String[] args) throws IOException, UnknownHostException, ClassNotFoundException {
    /* 1. Build connection */
    Client client = null;
    GameBasicSetting setting = null;
    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
    StringBuilder sb = new StringBuilder();
    if (args.length >= 3 || args.length <= 4) {
      sb.append(args[2]);
      sb.append(" ");
      if (args.length == 4) {
        if (Integer.valueOf(args[3]) < 2 || Integer.valueOf(args[3]) > 4) {
          System.out
            .println("Invalid Argument! Usage: ./client/build/install/client/bin/client <server_addr> <server_port> <username> [<num_players>]");
          System.exit(1);
        }
        sb.append(args[3]);
      }
    } else {
      System.out
        .println("Invalid Argument! Usage: ./client/build/install/client/bin/client <server_addr> <server_port> <username> [<num_players>]");
      System.exit(1);
    }

    // create a client obejct and connect it to the server
    client = new Client(args[0], Integer.valueOf(args[1]));
    client.sendObject(sb.toString());
    TextPlayer player;
    if (args.length == 3) {
      player = new TextPlayer(client, input, System.out, null);
    } else {
      System.out.println((String) client.recvObject());
      setting = client.recvGameBasicSetting();
      player = new TextPlayer(client, input, System.out, setting);
      player.displayGameSetting();
      /* 2. Initiation Phase */
      player.placeUnit();
    }
    /* 3. Play Phase */
    player.playGame();
    
    /* 4. Close Phase */
    try {
      if (input != null) {
        input.close();
      }
      if (client != null) {
        client.closeSocket();
      }
    } catch (IOException e) {
      System.out.println(e.getMessage());
    }
  }
}
